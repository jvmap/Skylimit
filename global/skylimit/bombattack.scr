// by jv_map

dropbomb local.plane local.gunner local.gunner_team local.no_detach local.drop_from_bay local.is_torpedo:
	local.MAXLIFE					= 120.0
	local.DT 						= 0.05
	local.DT_TRACE					= 0.25
	local.GRAVITY 					= (0 0 -9.81)
	local.MIN_ROT_DELTA				= 2.0 // degrees
	local.BAY_DRAG_DELAY			= 2.0 // s
	local.FIN_EFFECTIVENESS			= 6.0 // =2pi*taillength*finarea/frontal_area/diameter = 8*taillength*finaera/diameter^3
	local.ROTATION_DAMPING			= 100000.0 // s^-1
	
	local.CD0 						= self.info.drag // 'profile' drag
	
	if(local.drop_from_bay || local.is_torpedo)
	{
		// just let fall
		local.RELEASE_NORMAL_AVEL = 0.0
	}
	else
	{
		// bombs are released tail-hinge first so they cannot collide with the aircraft due to drag
		// this causes the bomb to rotate backwards (nose up) immediately after release
		local.RELEASE_NORMAL_AVEL = -2.0 // rad/s
	}

	local.FRONTAL_AREA				= 0.25 * level.PI * self.info.diameter * self.info.diameter // frontal area, m^2

	local.inflictor 		= local.gunner
	local.inflictor_team 	= local.gunner_team
	local.inflictor_owner 	= local.plane

	// wait till we're not upside down / pushing down
	while(local.plane && local.plane.p_vload <= 0.0)
	{
		waitframe
	}

	if !(local.plane)
	{
		end
	}
	
	if(!self.info.internal)
	{
		local.plane.CD0 -= local.CD0 * local.FRONTAL_AREA / local.plane.WINGAREA
	}

	if !(local.no_detach)
	{
		// detach from plane
		waitthread global/skylimit/flightmodel.scr::detach
		
		// phew :)
		local.plane.MASS -= self.info.mass
		self scale local.plane.SCALE
		
		// need to hack the position :(
		if(self.rack)
		{
			local.launchpos 	= (local.plane gettagposition self.rack.tag) - local.plane.SCALE * ( (self.rack gettagposition self.tag) - self.rack.origin )
			local.launchangles 	= local.plane gettagangles self.rack.tag
		}
		else
		{
			local.launchpos 	= local.plane gettagposition self.tag
			local.launchangles 	= local.plane gettagangles self.tag
		}
		
		self origin local.launchpos
		self angles local.launchangles
	}

	local.p_launcharm = (self.origin - local.plane.origin) * level.SL_UNITSCALE
	
	self.dmteam = local.gunner_team
	self.weapon_owner = local.gunner
	
	self.CAM_VIEWDIST = 400.0
	self.isviewable = game.true
	self.cam_lastviewtime = 0.0 // last time viewed by a camera
	
	// make self a specable weapon
	self.targetname = "SL_specable"
	self.spec_owner = local.gunner
	if(local.gunner)
	{
		local.gunner.last_specable_weapon = self
	}
	
	local.p_velocity = local.plane.p_velocity + vector_cross local.plane.p_avelocity local.p_launcharm
	local.w_velocity = local.p_velocity * (1.0 / level.SL_UNITSCALE)
	
	self.p_velocity = local.p_velocity
	self.p_avelocity = local.plane.p_avelocity + self.leftvector * local.RELEASE_NORMAL_AVEL * local.plane.p_vload
	
	local.endtime = level.time + local.MAXLIFE
	
	local.explode = game.false
	local.sink = game.false
	
	local.dmg_impact_constant = 1.0 // hp/J
	local.dmg_multiplier_submerged = 0.5 // fraction of damage done when bomb explodes underwater
	
	// free fall whoo :D
	local.time = 0.0
	local.next_trace_time = local.DT_TRACE
	local.lastpos = self.origin // last traced pos
	
	local.fully_released = game.false
	
	local.dragtime = 0.0
	
	if(local.drop_from_bay)
	{
		// drag kicks in only later
		local.dragtime += local.BAY_DRAG_DELAY
	}

	self.p_quat = waitthread global/skylimit/math.scr::anglestoquat self.angles
	self.p_working_quat = 1.0::0.0::0.0::0.0

	while(level.time <= local.endtime)
	{
		// ultra cheap drag
		local.density = (waitthread global/skylimit/atmosphere.scr::getstate ((self.origin[2] - $world.AVG_GROUNDLVL) * level.SL_UNITSCALE))[2]
		local.speed = vector_length local.p_velocity 
		local.p_accel = local.GRAVITY 
		
		if(local.time > local.dragtime)
		{
			local.p_accel -= (local.p_velocity * 0.5 * local.CD0 * local.density * local.speed * local.FRONTAL_AREA) * (1.0 / self.info.mass)
		}
		local.w_accel = local.p_accel * (1.0 / level.SL_UNITSCALE)
		
		self.origin += local.w_velocity * local.DT + 0.5 * local.w_accel * local.DT * local.DT

		local.p_velocity += local.p_accel * local.DT
		local.w_velocity = local.p_velocity * (1.0 / level.SL_UNITSCALE)
		
		self.p_velocity = local.p_velocity
		
		// turn in direction of travel
		local.aaccel = local.FIN_EFFECTIVENESS * local.FRONTAL_AREA * self.info.diameter * local.density * local.speed / self.info.inertia * (vector_cross self.forwardvector self.p_velocity)
		
		// damping
		local.aaccel -= local.ROTATION_DAMPING * local.FRONTAL_AREA * local.FRONTAL_AREA * self.info.diameter * local.density / self.info.inertia * self.p_avelocity
		
		// update angles
		local.rotation = self.p_avelocity * local.DT + 0.5 * local.aaccel * local.DT * local.DT
		
		if(level.time - self.cam_lastviewtime <= 0.10)
		{
			local.min_rot_delta = NIL
		}
		else
		{
			local.min_rot_delta = local.MIN_ROT_DELTA
		}
		
		waitthread global/skylimit/math.scr::qrotate local.rotation local.min_rot_delta
		
		// update avelocity
		self.p_avelocity += local.aaccel * local.DT
		
		// damage done when actually impacting on an ent
		// proportional to kinetic energy of the projectile
		// (it is assumed the target is not moving)
		// also do splash damage later
		local.dmg_impact = local.dmg_impact_constant * 0.5 * self.info.mass * local.speed * local.speed
			
		if(local.time >= local.next_trace_time)
		{
			local.next_trace_time = local.time + local.DT_TRACE
			
			// forward trace
			local.avg_vel = local.p_velocity + 0.5 * local.GRAVITY * local.DT_TRACE
			local.hit = waitthread global/skylimit/damage.scr::linedamage self.origin local.avg_vel local.DT_TRACE local.dmg_impact level.MODM_BOMB local.inflictor local.inflictor_team local.inflictor_owner game.false game.false game.false game.true
		
			if(local.hit)
			{
				local.explode = game.true
				local.explode_in_air = game.true
				local.explode_pos = local.lastpos
				break
			}
			else if(self.origin[2] < $world.SEALEVEL)
			{
				local.explode = game.true
				local.sink = game.true
				local.explode_pos = local.lastpos
				local.explode_pos[2] = $world.SEALEVEL
				break
			}
			else if(local.lastpos[2] < $world.OBSTACLEHEIGHT || self.origin[2] < $world.OBSTACLEHEIGHT)
			{
				// backward trace
				local.tracepos = trace local.lastpos self.origin 0
				if(local.tracepos != self.origin)
				{
					local.explode = game.true
					local.explode_pos = local.tracepos
					break
				}
			}
			
			local.lastpos = self.origin
		}
		
		wait local.DT
		local.time += local.DT
	}
	
	if(local.explode)
	{
		if(local.sink)
		{
			local.sfxpos = local.explode_pos
			local.sfxpos[2] += 0.1
			
			// grab an effectent from stack
			local.ent = waitthread global/skylimit/common.scr::getfromstack EffectEntity game.false
			if(local.ent)
			{
				local.ent model skylimit/fx/water_splash.tik
				local.ent scale (0.4 * self.info.sfx_scale)
				local.ent angles ( -90 0 0)
				local.ent origin local.sfxpos
				local.ent anim start
				local.ent thread global/skylimit/common.scr::releasetostack 0.5
			}
			
			//local.splash = spawn EffectEntity model skylimit/fx/water_splash.tik origin local.sfxpos scale self.info.sfx_scale angles ( -90 0 0)
			//local.splash anim start
			//local.splash commanddelay 4.0 remove
			
			// explode under water
			if( !local.is_torpedo)
			{				
				wait (randomfloat 0.50 + 0.10)
				
				//local.sfx = spawn EffectEntity model skylimit/fx/explosion_water.tik origin local.sfxpos scale self.info.sfx_scale angles ( -90 0 0)
				//local.sfx anim start
				
				// grab an effectent from stack
				local.ent = waitthread global/skylimit/common.scr::getfromstack EffectEntity game.true
				if(local.ent)
				{
					local.ent model skylimit/fx/explosion_water.tik
					local.ent scale (0.2 * self.info.sfx_scale)
					local.ent angles ( -90 0 0)
					local.ent origin local.sfxpos
					local.ent anim start
					local.ent thread global/skylimit/common.scr::releasetostack 0.5
				}
				
				// submerged shock damage
				waitthread global/skylimit/damage.scr::radiusdamage local.explode_pos self.info.blast_radius (local.dmg_multiplier_submerged * self.info.damage_center) (local.dmg_multiplier_submerged * self.info.damage_boundary) level.MODM_EXPLOSION local.inflictor local.inflictor_team local.inflictor_owner game.true game.false
			}
		}
		else
		{
			// splash damage
			local.hit_a_bobject = waitthread global/skylimit/damage.scr::radiusdamage local.explode_pos self.info.blast_radius self.info.damage_center self.info.damage_boundary level.MODM_EXPLOSION local.inflictor local.inflictor_team local.inflictor_owner game.true game.false
			
			if ( !local.explode_in_air)
			{
				local.ent = waitthread global/skylimit/common.scr::getfromstack EffectEntity game.true
				if(local.ent)
				{
					local.ent model skylimit/fx/bomb_hit.tik
					local.ent scale self.info.sfx_scale
					local.ent angles ( -90 0 0)
					local.ent origin local.explode_pos
					local.ent anim start
					local.ent thread global/skylimit/common.scr::releasetostack 2.0
				}
				
				if(!local.hit_a_bobject)
				{
					local.hit_runway = waitthread global/skylimit/runway.scr::checkdamage local.explode_pos self.info.damage_center self.info.sfx_scale local.inflictor local.inflictor_team
					
					if !(local.hit_runway)
					{
						// add a crater
						waitthread global/skylimit/sfx.scr::crater local.explode_pos self.info.sfx_scale game.true game.true
					}
				}
			}
		}
	}
	
	if ( !local.sink || !local.is_torpedo)
	{
		self remove
	}
end